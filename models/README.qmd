---
format: gfm
title: Measles models
---

## Highschool model

### Parameters

```{r}
yaml::read_yaml("highschool-params.yaml") |>
    str()
```

### Run

The following is the output from the highschool model:

```{r}
#| echo: false
system2("./highschool.o", "highschool-params.yaml", wait = TRUE, stdout=TRUE) |>
    cat(sep = "\n")
```

This model simulates the spread of measles in a highschool. The highschool has 1000 students, and the simulation runs for 60 days with one index case. 
We can check that transitions between states looking at the transition matrix:

```
Transition Probabilities:
 - Susceptible              1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 - Exposed                  0.00  0.68  0.19  0.00  0.00  0.11  0.00  0.02  0.00
 - Prodromal                0.00  0.00  0.70  0.26  0.00  0.00  0.00  0.04  0.00
 - Rash                     0.00  0.00  0.00  0.48  0.52  0.00  0.00  0.00  0.00
 - Isolated                 0.00  0.00  0.00  0.00  0.72  0.00  0.00  0.00  0.28
 - Quarantined Exposed      0.00  0.00  0.00  0.00  0.00  0.86  0.00  0.14  0.00
 - Quarantined Susceptible  0.08  0.00  0.00  0.00  0.00  0.00  0.92  0.00  0.00
 - Quarantined Infectious   0.00  0.00  0.05  0.00  0.22  0.00  0.00  0.73  0.00
 - Recovered  
```

From it, we see:

- Exposed can move to prodromal, quarantined exposed, or quarantined infectious.
- Prodromal moves to Rash or Quarantined Prodromal (which is infectious).
- Rash moves to Isolated (and triggers contact tracing).
- Isolated moves to Recovered (full immunity).
- Quarantined Exposed either moves to quarantined infectious or to isolated. It can moved to exposed, but since the quarantine period is 14 days, we don't see any case.
- Quarantined Infectious moves to prodromal (if exits quarantine) or to isolated (if rash detected), in which case contact tracing is triggered.

Furthermore, we can see the mermaid diagram generated by epiworld:

```{r}
#| label: print-diagram
#| output: asis
#| echo: false
cat("```mermaid\n")
readLines("highschool-diagram.mmd") |>
    cat(sep = "\n")
cat("\n```")
```


```{r}
#| label: reading-history
library(data.table)
histories <- lapply(list.files(
    "highschool-out", pattern="total_hist", full.names = TRUE),
   \(fn) {
      cbind(fn = fn, data.table::fread(fn))
   }) |> rbindlist()

# Figuring out the outbreak size
exposed <- c("Exposed", "Predromal", "Rash", "Isolated", "Quarantined Exposed", "Quarantined Susceptible", "Recovered")
counts <- histories[(state %in% exposed) & (date == max(date))]
counts <- counts[, .(Total = sum(counts)), by = "fn"]

library(ggplot2)
ggplot(counts, aes(x = Total)) +
    geom_histogram()
```

Preparing the data for output


```{r}
#| label: preparing-output
# Reshape the data to wide
histories_wide <- dcast(
    histories, fn + date ~ state, value.var = "counts")

# Generating simulation ids
histories_wide[, sim_num := as.integer(gsub(".+/([0-9]+)_.+", "\\1", fn))]
histories_wide[, fn := NULL]

fwrite(histories_wide, "highschool-histories.csv")

# Reading the 'transition.csv' files
transitions <- lapply(
    list.files("highschool-out", pattern="transition", full.names = TRUE),
   \(fn) {
      cbind(fn = fn, fread(fn))
    }) |> rbindlist()

# Detected cases
detected <- transitions[
    from != "Isolated" & to == "Isolated",
    .(fn, from, date, counts)
    ]
detected <- detected[counts > 0]
detected[, sim_num := as.integer(gsub(".+/([0-9]+)_.+", "\\1", fn))]
detected[, fn := NULL]

fwrite(detected, "highschool-detected.csv")
```

Some statistics about the contact tracing. Each detected case is moved to the isolated state and triggers contact tracing. The following plot shows the cumulative number of detected cases over time:

```{r}
#| label: contact-tracing
detected_cum <- detected[, .(Total = sum(counts)), by = .(date, sim_num )] 
detected_cum[, cumulative := cumsum(Total), by = sim_num]
detected_cum[, min := quantile(cumulative, 0.025), by = date]
detected_cum[, mean := mean(cumulative), by = date]
detected_cum[, max := quantile(cumulative, 0.975), by = date]
detected_cum |> 
    ggplot(aes(x = date, y = cumulative)) +
    geom_line(aes(x=date, y = mean)) +
    geom_ribbon(
        aes(ymin = min, ymax = max), fill = "grey", alpha = 0.5
        ) +
    # Legend about the ribbon and the mean
    geom_line(aes(x=date, y = min), linetype = "dashed") +
    geom_line(aes(x=date, y = max), linetype = "dashed") +
    labs(
        title = "Cumulative detected cases",
        x = "Date",
        y = "Cumulative detected cases",
        caption = "The shaded area represents the 95% confidence interval"
    )
```

