---
format: gfm
---


```{r}
#| label: data-generation

vax_rates <- (1:10)/10
params <- list(
  "Population size" = 2000.0,
  "1/Rash period" = 0.2500,
  "Contact rate" = 2.380952,
  "Quarantine willingness" = 1.0,
  "Incubation period" = 12.0000,
  "Days undetected" = 2.0000,
  "Prodromal period" = 3.0000,
  "Quarantine days" = 21.0000,
  "Rash period" = 4.0000,
  "Transmission rate" = 0.90,
  "Vaccination rate" = 0.95,
  "Vax improved recovery" = 0.5000,
  "Vax efficacy" = 0.99,
  "initial number of exposed" = 1.0000,
  "Seed" = 2231.0,
  "N days" = 60.0,
  "Replicates" = 1000.0,
  "Threads" = 35
)

# Preparing output
paths <- vector(length(vax_rates), mode = "list")
names(paths) <- vax_rates

call_output <- paths

n <- params[["Population size"]]

for (i in seq_along(vax_rates)) {

    # Preparing the parameters and output path
    paths[[i]] <- tempfile("out")
    unlink(paths[[i]], recursive = TRUE, force = TRUE)
    dir.create(paths[[i]])

    temp_params_fn <- tempfile(fileext = ".yaml")
    params[["Vaccination rate"]] <- vax_rates[i]

    # Theoretical R0
    params$R0 <- with(params, {
    `Contact rate` * `Transmission rate` * (
        1/`1/Rash period` + `Prodromal period`
    )
    })

    yaml::write_yaml(params, temp_params_fn)

    call_output[[i]] <- system2(
        "./school_quarantine.o",
        c(temp_params_fn, paths[[i]], n),
        wait = TRUE, stdout=TRUE
        )

    message("Done with vaccination rate ", vax_rates[i])
}
```


```{r}
library(data.table)
get_counts <- function(path) {
    histories <- lapply(list.files(
        path, pattern="total_hist", full.names = TRUE),
    \(fn) {
        cbind(fn = fn, data.table::fread(fn))
    }) |> rbindlist()

    # Figuring out the outbreak size
    exposed <- c("Exposed", "Predromal", "Rash", "Isolated", "Quarantined Exposed", "Recovered")
    counts <- histories[(state %in% exposed) & (date == max(date))]
    counts[, .(Total = sum(counts)), by = "fn"]
}

compute_outbreak_size <- function(counts, sizes = c(2, 5, 10, 20)) {

    sizes <- data.table(
    Size = sizes,
    Probability = sapply(sizes, \(x) {
        sum(counts$Total >= x)/nrow(counts)
    }),
    "Likely size (if > Size)" = sapply(sizes, \(s){
        sprintf(
        "[%.2f, %.2f]",
        quantile(counts$Total[counts$Total >= s], .025),
        quantile(counts$Total[counts$Total >= s], .975)
        )})
    )


    sizes[, Probability := fifelse(
    Probability <= 0.01,
    "< 0.01",
    sprintf("%.2f", Probability)
    )]

    # Replaces NAs
    sizes[, `Likely size (if > Size)` := fifelse(
    grepl("NA", `Likely size (if > Size)`),
    "-",
    `Likely size (if > Size)`
    )]


    list(
      sizes = sizes,
      counts = counts
    )
}

counts <- paths
for (i in names(paths)) {
    tmp_counts <- get_counts(paths[[i]])
    counts[[i]] <- compute_outbreak_size(tmp_counts)
}

library(data.table)
counts <- lapply(names(paths), \(i) {
  counts[[i]]$counts[, .(Size = Total, Rate = i)]
}) |> rbindlist()

counts_summary <- counts[, .(
  Mean = mean(Size),
  Median = median(Size),
  lower = quantile(Size, .05),
  upper = quantile(Size, .95)
), by = Rate]

library(ggplot2)
ggplot(counts_summary) +
  geom_ribbon(
    aes(x = as.numeric(Rate), ymin = lower, ymax = upper),
    fill = "gray", alpha = .8
  ) +
  geom_line(aes(x = as.numeric(Rate), y = Mean))
ggsave("outbreak_size_violin.png")
```